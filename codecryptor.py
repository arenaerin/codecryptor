import base64
exec(base64.b64decode('aW1wb3J0IHN5cwppbXBvcnQgYmFzZTY0CmltcG9ydCB6bGliCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCB0ZW1wZmlsZQpmcm9tIFB5UXQ1LlF0V2lkZ2V0cyBpbXBvcnQgKAogICAgUUFwcGxpY2F0aW9uLCBRV2lkZ2V0LCBRTGFiZWwsIFFUZXh0RWRpdCwgUVZCb3hMYXlvdXQsIFFQdXNoQnV0dG9uLAogICAgUUZpbGVEaWFsb2csIFFDb21ib0JveCwgUU1lc3NhZ2VCb3gsIFFMaW5lRWRpdCwgUUhCb3hMYXlvdXQKKQpmcm9tIFB5UXQ1LlF0R3VpIGltcG9ydCBRRm9udAoKY2xhc3MgQ29kZUNyeXB0b3IoUVdpZGdldCk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5zZXRXaW5kb3dUaXRsZSgiQ29kZUNyeXB0b3IgLSBQeXRob24sIFBIUCAmIEhUTUwgRW5jcnlwdG9yIikKICAgICAgICBzZWxmLnNldEdlb21ldHJ5KDEwMCwgMTAwLCA4MDAsIDc1MCkKICAgICAgICBzZWxmLnNldHVwX3VpKCkKCiAgICBkZWYgc2V0dXBfdWkoc2VsZik6CiAgICAgICAgbGF5b3V0ID0gUVZCb3hMYXlvdXQoKQoKICAgICAgICBzZWxmLmxhbmdfc2VsZWN0b3IgPSBRQ29tYm9Cb3goKQogICAgICAgIHNlbGYubGFuZ19zZWxlY3Rvci5hZGRJdGVtcyhbIlB5dGhvbiIsICJQSFAiLCAiSFRNTCJdKQogICAgICAgIGxheW91dC5hZGRXaWRnZXQoUUxhYmVsKCJTZWxlY3QgTGFuZ3VhZ2U6IikpCiAgICAgICAgbGF5b3V0LmFkZFdpZGdldChzZWxmLmxhbmdfc2VsZWN0b3IpCgogICAgICAgIHNlbGYuZWRpdG9yID0gUVRleHRFZGl0KCkKICAgICAgICBzZWxmLmVkaXRvci5zZXRGb250KFFGb250KCJDb3VyaWVyIiwgMTEpKQogICAgICAgIGxheW91dC5hZGRXaWRnZXQoUUxhYmVsKCJFbnRlciB5b3VyIGNvZGU6IikpCiAgICAgICAgbGF5b3V0LmFkZFdpZGdldChzZWxmLmVkaXRvcikKCiAgICAgICAgcGFzc19sYXlvdXQgPSBRSEJveExheW91dCgpCiAgICAgICAgcGFzc19sYXlvdXQuYWRkV2lkZ2V0KFFMYWJlbCgiUGFzc3dvcmQgKG9wdGlvbmFsKToiKSkKICAgICAgICBzZWxmLnBhc3NfZmllbGQgPSBRTGluZUVkaXQoKQogICAgICAgIHNlbGYucGFzc19maWVsZC5zZXRQbGFjZWhvbGRlclRleHQoIkxlYXZlIGVtcHR5IGZvciBubyBwYXNzd29yZCIpCiAgICAgICAgcGFzc19sYXlvdXQuYWRkV2lkZ2V0KHNlbGYucGFzc19maWVsZCkKICAgICAgICBsYXlvdXQuYWRkTGF5b3V0KHBhc3NfbGF5b3V0KQoKICAgICAgICBzZWxmLmVuY3J5cHRfYnV0dG9uID0gUVB1c2hCdXR0b24oIkVuY3J5cHQgLyBPYmZ1c2NhdGUgQ29kZSIpCiAgICAgICAgc2VsZi5lbmNyeXB0X2J1dHRvbi5jbGlja2VkLmNvbm5lY3Qoc2VsZi5lbmNyeXB0X2NvZGUpCiAgICAgICAgbGF5b3V0LmFkZFdpZGdldChzZWxmLmVuY3J5cHRfYnV0dG9uKQoKICAgICAgICBzZWxmLnJlc3VsdCA9IFFUZXh0RWRpdCgpCiAgICAgICAgc2VsZi5yZXN1bHQuc2V0Rm9udChRRm9udCgiQ291cmllciIsIDExKSkKICAgICAgICBsYXlvdXQuYWRkV2lkZ2V0KFFMYWJlbCgiRW5jcnlwdGVkL09iZnVzY2F0ZWQgT3V0cHV0OiIpKQogICAgICAgIGxheW91dC5hZGRXaWRnZXQoc2VsZi5yZXN1bHQpCgogICAgICAgIHNlbGYuc2F2ZV9idXR0b24gPSBRUHVzaEJ1dHRvbigiU2F2ZSBPdXRwdXQgdG8gRmlsZSIpCiAgICAgICAgc2VsZi5zYXZlX2J1dHRvbi5jbGlja2VkLmNvbm5lY3Qoc2VsZi5zYXZlX291dHB1dCkKICAgICAgICBsYXlvdXQuYWRkV2lkZ2V0KHNlbGYuc2F2ZV9idXR0b24pCgogICAgICAgIHNlbGYudGVzdF9idXR0b24gPSBRUHVzaEJ1dHRvbigiVGVzdCBSZXZlcnNlIERlY3J5cHRpb24iKQogICAgICAgIHNlbGYudGVzdF9idXR0b24uY2xpY2tlZC5jb25uZWN0KHNlbGYucmV2ZXJzZV90ZXN0KQogICAgICAgIGxheW91dC5hZGRXaWRnZXQoc2VsZi50ZXN0X2J1dHRvbikKCiAgICAgICAgc2VsZi5zZXRMYXlvdXQobGF5b3V0KQoKICAgIGRlZiBlbmNyeXB0X2NvZGUoc2VsZik6CiAgICAgICAgY29kZSA9IHNlbGYuZWRpdG9yLnRvUGxhaW5UZXh0KCkKICAgICAgICBsYW5nID0gc2VsZi5sYW5nX3NlbGVjdG9yLmN1cnJlbnRUZXh0KCkKICAgICAgICBwYXNzd29yZCA9IHNlbGYucGFzc19maWVsZC50ZXh0KCkuc3RyaXAoKQogICAgICAgIHJlc3VsdCA9ICIiCgogICAgICAgIGlmIG5vdCBjb2RlLnN0cmlwKCk6CiAgICAgICAgICAgIFFNZXNzYWdlQm94Lndhcm5pbmcoc2VsZiwgIkVycm9yIiwgIkNvZGUgYXJlYSBpcyBlbXB0eSEiKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgaWYgbGFuZyA9PSAiUHl0aG9uIjoKICAgICAgICAgICAgaWYgcGFzc3dvcmQ6CiAgICAgICAgICAgICAgICBjb2RlID0gZiIjcGFzc3dvcmQ6e3Bhc3N3b3JkfVxuIiArIGNvZGUKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZW5jb2RlZCA9IGJhc2U2NC5iNjRlbmNvZGUoY29kZS5lbmNvZGUoKSkuZGVjb2RlKCkKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGYiaW1wb3J0IGJhc2U2NFxuZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCd7ZW5jb2RlZH0nKSkiCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGYiIyBFcnJvcjoge2V9IgoKICAgICAgICBlbGlmIGxhbmcgPT0gIlBIUCI6CiAgICAgICAgICAgIGlmIHBhc3N3b3JkOgogICAgICAgICAgICAgICAgY29kZSA9IGYiLy9wYXNzd29yZDp7cGFzc3dvcmR9XG4iICsgY29kZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBjb21wcmVzc2VkID0gemxpYi5jb21wcmVzcyhjb2RlLmVuY29kZSgpKQogICAgICAgICAgICAgICAgZW5jb2RlZCA9IGJhc2U2NC5iNjRlbmNvZGUoY29tcHJlc3NlZCkuZGVjb2RlKCkKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGYiPD9waHAgZXZhbChnemluZmxhdGUoYmFzZTY0X2RlY29kZSgne2VuY29kZWR9JykpKTsgPz4iCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGYiLy8gRXJyb3I6IHtlfSIKCiAgICAgICAgZWxpZiBsYW5nID09ICJIVE1MIjoKICAgICAgICAgICAgIyBGb3IgSFRNTCwgZG8gYmFzZTY0IGVuY29kZSArIEpTIGRlY29kZSBvbiBicm93c2VyCiAgICAgICAgICAgIGlmIHBhc3N3b3JkOgogICAgICAgICAgICAgICAgY29kZSA9IGYiPCEtLXBhc3N3b3JkOntwYXNzd29yZH0tLT5cbiIgKyBjb2RlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGVuY29kZWQgPSBiYXNlNjQuYjY0ZW5jb2RlKGNvZGUuZW5jb2RlKCkpLmRlY29kZSgpCiAgICAgICAgICAgICAgICAjIE91dHB1dCBhIHNlbGYtZGVjb2RpbmcgSFRNTCBzbmlwcGV0CiAgICAgICAgICAgICAgICByZXN1bHQgPSBmIiIiPCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD48dGl0bGU+T2JmdXNjYXRlZCBIVE1MPC90aXRsZT48L2hlYWQ+Cjxib2R5Pgo8c2NyaXB0Pgp2YXIgZGVjb2RlZCA9IGF0b2IoIntlbmNvZGVkfSIpOwpkb2N1bWVudC53cml0ZShkZWNvZGVkKTsKPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPiIiIgogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBmIjwhLS0gRXJyb3I6IHtlfSAtLT4iCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlc3VsdCA9ICIjIFVua25vd24gbGFuZ3VhZ2UiCgogICAgICAgIHNlbGYucmVzdWx0LnNldFBsYWluVGV4dChyZXN1bHQpCgogICAgZGVmIHNhdmVfb3V0cHV0KHNlbGYpOgogICAgICAgIG9wdGlvbnMgPSBRRmlsZURpYWxvZy5PcHRpb25zKCkKICAgICAgICBmaWxlbmFtZSwgXyA9IFFGaWxlRGlhbG9nLmdldFNhdmVGaWxlTmFtZShzZWxmLCAiU2F2ZSBPdXRwdXQiLCAiIiwgIkFsbCBGaWxlcyAoKikiLCBvcHRpb25zPW9wdGlvbnMpCiAgICAgICAgaWYgZmlsZW5hbWU6CiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlbmFtZSwgInciKSBhcyBmOgogICAgICAgICAgICAgICAgZi53cml0ZShzZWxmLnJlc3VsdC50b1BsYWluVGV4dCgpKQogICAgICAgICAgICBRTWVzc2FnZUJveC5pbmZvcm1hdGlvbihzZWxmLCAiU2F2ZWQiLCBmIkVuY3J5cHRlZCBjb2RlIHNhdmVkIHRvOlxue2ZpbGVuYW1lfSIpCgogICAgZGVmIHJldmVyc2VfdGVzdChzZWxmKToKICAgICAgICBsYW5nID0gc2VsZi5sYW5nX3NlbGVjdG9yLmN1cnJlbnRUZXh0KCkKICAgICAgICBjb2RlID0gc2VsZi5yZXN1bHQudG9QbGFpblRleHQoKQoKICAgICAgICBpZiBsYW5nID09ICJQeXRob24iOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB3aXRoIHRlbXBmaWxlLk5hbWVkVGVtcG9yYXJ5RmlsZShtb2RlPSJ3IiwgZGVsZXRlPUZhbHNlLCBzdWZmaXg9Ii5weSIpIGFzIHRlbXA6CiAgICAgICAgICAgICAgICAgICAgdGVtcC53cml0ZShjb2RlKQogICAgICAgICAgICAgICAgICAgIHRlbXAuZmx1c2goKQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsicHl0aG9uMyIsIHRlbXAubmFtZV0sIHN0ZGVycj1zdWJwcm9jZXNzLlNURE9VVCkKICAgICAgICAgICAgICAgIFFNZXNzYWdlQm94LmluZm9ybWF0aW9uKHNlbGYsICJSZXZlcnNlIFRlc3QiLCBmIk91dHB1dDpcbntyZXN1bHQuZGVjb2RlKCl9IikKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgUU1lc3NhZ2VCb3gud2FybmluZyhzZWxmLCAiRXJyb3IiLCBmIlRlc3QgZmFpbGVkOiB7ZX0iKQoKICAgICAgICBlbGlmIGxhbmcgPT0gIlBIUCI6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKG1vZGU9InciLCBkZWxldGU9RmFsc2UsIHN1ZmZpeD0iLnBocCIpIGFzIHRlbXA6CiAgICAgICAgICAgICAgICAgICAgdGVtcC53cml0ZShjb2RlKQogICAgICAgICAgICAgICAgICAgIHRlbXAuZmx1c2goKQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsicGhwIiwgdGVtcC5uYW1lXSwgc3RkZXJyPXN1YnByb2Nlc3MuU1RET1VUKQogICAgICAgICAgICAgICAgUU1lc3NhZ2VCb3guaW5mb3JtYXRpb24oc2VsZiwgIlJldmVyc2UgVGVzdCIsIGYiT3V0cHV0Olxue3Jlc3VsdC5kZWNvZGUoKX0iKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBRTWVzc2FnZUJveC53YXJuaW5nKHNlbGYsICJFcnJvciIsIGYiVGVzdCBmYWlsZWQ6IHtlfSIpCgogICAgICAgIGVsaWYgbGFuZyA9PSAiSFRNTCI6CiAgICAgICAgICAgICMgRm9yIEhUTUwsIGp1c3Qgc2F2ZSBhbmQgb3BlbiBpbiBicm93c2VyIGZvciB0ZXN0aW5nCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKG1vZGU9InciLCBkZWxldGU9RmFsc2UsIHN1ZmZpeD0iLmh0bWwiKSBhcyB0ZW1wOgogICAgICAgICAgICAgICAgICAgIHRlbXAud3JpdGUoY29kZSkKICAgICAgICAgICAgICAgICAgICB0ZW1wLmZsdXNoKCkKICAgICAgICAgICAgICAgICAgICBpbXBvcnQgd2ViYnJvd3NlcgogICAgICAgICAgICAgICAgICAgIHdlYmJyb3dzZXIub3BlbihmImZpbGU6Ly97dGVtcC5uYW1lfSIpCiAgICAgICAgICAgICAgICBRTWVzc2FnZUJveC5pbmZvcm1hdGlvbihzZWxmLCAiUmV2ZXJzZSBUZXN0IiwgIk9iZnVzY2F0ZWQgSFRNTCBvcGVuZWQgaW4geW91ciBkZWZhdWx0IGJyb3dzZXIuIikKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgUU1lc3NhZ2VCb3gud2FybmluZyhzZWxmLCAiRXJyb3IiLCBmIlRlc3QgZmFpbGVkOiB7ZX0iKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICBRTWVzc2FnZUJveC53YXJuaW5nKHNlbGYsICJFcnJvciIsICJVbmtub3duIGxhbmd1YWdlIHNlbGVjdGVkIGZvciB0ZXN0IikKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBhcHAgPSBRQXBwbGljYXRpb24oc3lzLmFyZ3YpCiAgICB3aW4gPSBDb2RlQ3J5cHRvcigpCiAgICB3aW4uc2hvdygpCiAgICBzeXMuZXhpdChhcHAuZXhlY18oKSkK'))